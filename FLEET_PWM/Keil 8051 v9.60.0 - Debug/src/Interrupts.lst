C51 COMPILER V9.60.0.0   INTERRUPTS                                                        11/15/2020 15:24:07 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE INTERRUPTS
OBJECT MODULE PLACED IN .\src\Interrupts.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\Lawrenc
                    -e\SimplicityStudio\v5_workspace\EFM8BB3_I2C_Slave_FIFO\src\Interrupts.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNING
                    -LEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\Lawrence\SimplicityStudio\v5_works
                    -pace\EFM8BB3_I2C_Slave_FIFO\inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.1.7//Device/shared/si8051Base;
                    -C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.1.7//Device/EFM8BB3/inc) PRINT(.\src\Interrupts.lst) COND PAGE
                    -WIDTH(120) PAGELENGTH(65) OBJECT(.\src\Interrupts.OBJ)

line level    source

   1          //=========================================================
   2          // src/Interrupts.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8BB3_Register_Enums.h>
  11          #include "EFM8BB3_I2C_Slave.h"
  12          
  13          //-----------------------------------------------------------------------------
  14          // I2C0_ISR
  15          //-----------------------------------------------------------------------------
  16          //
  17          // I2C0 ISR Content goes here. Remember to clear flag bits:
  18          // I2C0STAT::I2C0INT (I2C Interrupt)
  19          //
  20          //-----------------------------------------------------------------------------
  21          SI_INTERRUPT(I2C0_ISR, I2C0_IRQn)
  22          {
  23   1              //  Number of bytes in the transmit FIFO and shift register
  24   1              uint8_t txCnt = 0;
  25   1      
  26   1              if((I2C0FCN1 & I2C0FCN1_TFRQ__BMASK) && (txDataReady == 1))
  27   1              {
  28   2                      // Firmware fill the TX FIFO until the TX FIFO full, and it should
  29   2                      // locate at the beginning of the ISR, because the switch below may
  30   2                      // consume so much system cycle.
  31   2                      while((I2C0FCN1 & I2C0FCN1_TXNF__BMASK) == I2C0FCN1_TXNF__NOT_FULL)
  32   2                      {
  33   3                              if ((I2C0STAT & I2C0STAT_NACK__BMASK) == I2C0STAT_NACK__SET)
  34   3                              {
  35   4                                      // Master did not NACK
  36   4                                      // Stopping transfer of data
  37   4                                      // Flush FIFO if there is data in it
  38   4                                      I2C0STAT &= ~I2C0STAT_NACK__BMASK;
  39   4                              }
  40   3                              else
  41   3                              {
  42   4                                      I2C0DOUT = sendDataValue++;
  43   4                                      sendDataCnt++;
  44   4                              }
  45   3                      }
  46   2                      // The TFRQ will not set I2C0INT bit, so don't need to clear
  47   2                      // the I2C0INT when TFRQ happen.
  48   2                      // Other interrupts may be generated while dealing with the TFRQ,
  49   2                      // so just return to avoid clearing other interrupts.
  50   2                      return;
  51   2              }
C51 COMPILER V9.60.0.0   INTERRUPTS                                                        11/15/2020 15:24:07 PAGE 2   

  52   1      
  53   1              if(I2C0FCN1 & I2C0FCN1_RFRQ__SET)
  54   1              {
  55   2                      while((I2C0FCN1 & I2C0FCN1_RXE__BMASK) == I2C0FCN1_RXE__NOT_EMPTY)
  56   2                      { // Read data out
  57   3                              i2cReceivedData   = I2C0DIN;
  58   3                              // This example only supports host write 1 byte to slave
  59   3                              // If want slave to accept more than 1 byte, use a buffer to save the data from FIFO
  60   3                              dataReady = 1;
  61   3                      }
  62   2                      // Other interrupts may be generated while dealing with the RFRQ,
  63   2                      // so just return to avoid clearing other interrupts.
  64   2                      return;
  65   2              }
  66   1      
  67   1              switch (I2C0STAT & I2C_STATUS_VECTOR_MASK)
  68   1              {
  69   2      
  70   2                      case I2C_ADDR_RD:  // START+ADDR+R
  71   2                              I2C0STAT &= ~(I2C0STAT_START__BMASK | I2C0STAT_RD__BMASK);
  72   2                              // The data be written to FIFO within Transmit FIFO Request (TFRQ) service routines.
  73   2                              break;
  74   2      
  75   2                      case I2C_ADDR_WR: // START+ADDR+W
  76   2                              I2C0STAT &= ~(I2C0STAT_START__BMASK | I2C0STAT_WR__BMASK);
  77   2                              break;
  78   2      
  79   2                      case I2C_RD_DATA:
  80   2                              // Check for NACK
  81   2                              if ((I2C0STAT & I2C0STAT_NACK__BMASK) == I2C0STAT_NACK__SET)
  82   2                              {
  83   3                                      // Master did not NACK
  84   3                                      // Stopping transfer of data
  85   3                                      // Flush FIFO if there is data in it
  86   3                                      I2C0STAT &= ~I2C0STAT_NACK__BMASK;
  87   3                              }
  88   2                              I2C0STAT &= ~I2C0STAT_RD__BMASK;
  89   2                              break;
  90   2      
  91   2                      case I2C_WR_DATA:  // FIFO is full, whatever slave ACK/NACK master
  92   2                              I2C0STAT &= ~I2C0STAT_WR__BMASK;
  93   2                              break;
  94   2      
  95   2                      case I2C_STOSTA:
  96   2                      case I2C_STOSTARD:
  97   2                              I2C0STAT &= ~I2C0STAT_STOP__BMASK;
  98   2                              txCnt = (I2C0FCT & I2C0FCT_TXCNT__FMASK) >> I2C0FCT_TXCNT__SHIFT;
  99   2                              // One byte be shifted to the Shift register, also need to reload it.
 100   2                              if(sendDataCnt > 2)
 101   2                              {
 102   3                                      txCnt += 1;
 103   3                              }
 104   2      
 105   2                              if(txCnt > 0)
 106   2                              {
 107   3                                      I2C0FCN0 |= I2C0FCN0_TFLSH__FLUSH;
 108   3                                      if(txCnt >= 2)
 109   3                                      {
 110   4                                              I2C0DOUT = sendDataValue-txCnt;
 111   4                                              I2C0DOUT = sendDataValue-txCnt+1;
 112   4                                              sendDataValue = sendDataValue-(txCnt-2);
 113   4                                              sendDataCnt = 2;
 114   4                                      }
C51 COMPILER V9.60.0.0   INTERRUPTS                                                        11/15/2020 15:24:07 PAGE 3   

 115   3                                      else if(txCnt == 1)
 116   3                                      {
 117   4                                              I2C0DOUT = sendDataValue-txCnt;
 118   4                                              sendDataCnt = 1;
 119   4                                      }
 120   3                              }
 121   2                              //
 122   2                              //      STOP Condition received.
 123   2                              //
 124   2                              return;         // START Flag set, so re-enter ISR
 125   2                              break;
 126   2      
 127   2                      case I2C_STO:
 128   2                              I2C0STAT &= ~I2C0STAT_STOP__BMASK;
 129   2                              txCnt = (I2C0FCT & I2C0FCT_TXCNT__FMASK) >> I2C0FCT_TXCNT__SHIFT;
 130   2                              // One byte be shifted to the Shift register, also need to reload it.
 131   2                              if(sendDataCnt > 2)
 132   2                              {
 133   3                                      txCnt += 1;
 134   3                              }
 135   2      
 136   2                              if(txCnt > 0)
 137   2                              {
 138   3                                      I2C0FCN0 |= I2C0FCN0_TFLSH__FLUSH;
 139   3                                      if(txCnt >= 2)
 140   3                                      {
 141   4                                              I2C0DOUT = sendDataValue-txCnt;
 142   4                                              I2C0DOUT = sendDataValue-txCnt+1;
 143   4                                              sendDataValue = sendDataValue-(txCnt-2);
 144   4                                              sendDataCnt = 2;
 145   4                                      }
 146   3                                      else if(txCnt == 1)
 147   3                                      {
 148   4                                              I2C0DOUT = sendDataValue-txCnt;
 149   4                                              sendDataCnt = 1;
 150   4                                      }
 151   3                              }
 152   2                              //
 153   2                              //      STOP Condition received.
 154   2                              //
 155   2                              break;
 156   2                      default:
 157   2                              break;
 158   2              }
 159   1      
 160   1              // Clear I2C interrupt flag
 161   1              I2C0STAT &= ~I2C0STAT_I2C0INT__BMASK;
 162   1      }
 163          
 164          //-----------------------------------------------------------------------------
 165          // TIMER4_ISR
 166          //-----------------------------------------------------------------------------
 167          //
 168          // TIMER4 ISR Content goes here. Remember to clear flag bits:
 169          // TMR4CN0::TF4H (Timer # High Byte Overflow Flag)
 170          // TMR4CN0::TF4L (Timer # Low Byte Overflow Flag)
 171          //
 172          //-----------------------------------------------------------------------------
 173          SI_INTERRUPT(TIMER4_ISR, TIMER4_IRQn)
 174          {
 175   1              SFRPAGE = PG3_PAGE;
 176   1      
 177   1              I2C0CN0 &= ~I2C0CN0_I2C0EN__BMASK;                      // Disable I2C module
C51 COMPILER V9.60.0.0   INTERRUPTS                                                        11/15/2020 15:24:07 PAGE 4   

 178   1              I2C0CN0 |= I2C0CN0_I2C0EN__ENABLED;                     // Re-enable I2C module
 179   1      
 180   1              SFRPAGE = PG2_PAGE;
 181   1              TMR4CN0 &= ~TMR4CN0_TF4H__BMASK;                        // Clear Timer3 interrupt-pending flag
 182   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    359    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
